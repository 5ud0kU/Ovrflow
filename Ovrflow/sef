# Synapse Export Format (SEF) {https://gitlab.com/H3xad3cimalDev/synapse}
@ CONFIGURATION SETUP:ovrflow
~print Generating project...
~create_base
~create_file /usr/tmp.conf
~edit_file /usr/tmp.conf
    ># Metadata
    >proj_name=ovrflow
    >proj_version=1.0
    >
    ># Locations
    >bin_location=/home/a/ovrflow/bin
    >lib_location=/home/a/ovrflow/lib
    >obj_location=/home/a/ovrflow/obj
    >
<
~port_project_conf
~create_project_skeleton
%
@ Main Loading
~print Generating Main...
~create_file_in_proj Main.src
~edit_file_in_proj Main.src
    >Graph.displayResolution(6,12);
    >
    >makeTitle = function()
    >  animation = [];
    >  animation.push(Graph.animationPart(Graph.Size(" ",18),Math.vector2(1,1)));
    >  animation.push(Graph.animationPart(Graph.Size("$",18),Math.vector2(1,2)));
    >  animation.push(Graph.animationPart(Graph.Size("O",18),Math.vector2(1,3)));
    >  animation.push(Graph.animationPart(Graph.Size("V",18),Math.vector2(1,4)));
    >  animation.push(Graph.animationPart(Graph.Size("R",18),Math.vector2(1,5)));
    >  animation.push(Graph.animationPart(Graph.Size("F",18),Math.vector2(1,6)));
    >  animation.push(Graph.animationPart(Graph.Size("L",18),Math.vector2(1,7)));
    >  animation.push(Graph.animationPart(Graph.Size("O",18),Math.vector2(1,8)));
    >  animation.push(Graph.animationPart(Graph.Size("W",18),Math.vector2(1,9)));
    >  animation.push(Graph.animationPart(Graph.Size("$",18),Math.vector2(1,10)));
    >  animation.push(Graph.animationPart(Graph.Size(" ",18),Math.vector2(1,11)));
    >  animation.push(Graph.animationPart(Graph.Size(" ",18),Math.vector2(1,12)));
    >  Graph.animator(animation);
    >end function
    >
    >makeAmem = function()
    >  //   1 2 3 4 5 6 7 8 9 10 11 12
    >  //1-[ ][$][O][V][R][F][O][O][D][$][ ][ ]
    >  //2-[ ][x][x][ ][ ][x][x][ ][ ][x][x][ ]
    >
    >  makeTitle();
    >
    >  animation = [];
    >
    >  for i in range(1,12)
    >	   animation.push(Graph.animationPart(Graph.mark(Graph.Size("	",20),"#918b54"),Math.vector2(2,i)));
    >	   animation.push(Graph.animationPart(Graph.mark(Graph.Size("	",20),"#4a6e47"),Math.vector2(3,i)));
    >	   if i > 1 and i < 4 or i > 5 and i < 8 or i > 9 and i < 12 then
    >		   animation.push(Graph.animationPart(Graph.mark(Graph.Size("	",20),"#000000"),Math.vector2(4,i)));
    >		   animation.push(Graph.animationPart(Graph.mark(Graph.Size("	",20),"#000000"),Math.vector2(5,i)));
    >	   else
    >		   animation.push(Graph.animationPart(Graph.mark(Graph.Size("	",20),"#4a6e47"),Math.vector2(4,i)));
    >		   animation.push(Graph.animationPart(Graph.mark(Graph.Size("	",20),"#4a6e47"),Math.vector2(5,i)));
    > 	   end if
    >	   animation.push(Graph.animationPart(Graph.mark(Graph.Size("	",20),"#4a6e47"),Math.vector2(6,i)));
    >  end for
    >  Graph.animator(animation);
    >end function
    >
    >overflow = 0;
    >makeAflo = function()
    >	if globals.overflow > 0 then
    >		animation = [];
    >		for i in range(1,globals.overflow)
    >      ch = String.stringToList("abcdefghijklmnopqrstuvwxyz0123456789");
    >      ch.shuffle;
    >      animation.push(Graph.animationPart(Graph.mark(Graph.Size(ch[0],18),"#7a0c00"),Math.vector2(1,i)));
    >			animation.push(Graph.animationPart(Graph.mark(Graph.Size("	",20),"#7a0c00"),Math.vector2(2,i)));
    >			animation.push(Graph.animationPart(Graph.mark(Graph.Size("	",20),"#7a0c00"),Math.vector2(3,i)));
    >			animation.push(Graph.animationPart(Graph.mark(Graph.Size("	",20),"#7a0c00"),Math.vector2(4,i)));
    >			animation.push(Graph.animationPart(Graph.mark(Graph.Size("	",20),"#7a0c00"),Math.vector2(5,i)));
    >			animation.push(Graph.animationPart(Graph.mark(Graph.Size("	",20),"#7a0c00"),Math.vector2(6,i)));
    >		end for
    >		Graph.animator(animation);
    >	end if
    >end function
    >
    >point = function()
    >	globals.overflow = globals.overflow + 1;
    >	if globals.overflow == 12 then exit("you destroyed the server !");
    >end function
    >
    >lost = function()
    >	if globals.overflow > 0 then globals.overflow = globals.overflow - 1;
    >end function
    >
    >game = function()
    >	buffers = ["1","2","3"];
    >
    >	ch = user_input(str(char(10) + "[1] http [2] ssh [3] ftp [4] leave"+char(10)+"[(B$)]:"));
    >	if ch == "4" then exit();
    >
    >	//TODO
    >	//Here if the client choose to play he have to bet 1BTC
    >
    >	if typeof(ch.to_int) != "number" then
    >		makeAmem();
    >	end if
    >
    >	buffers.shuffle;
    >	if buffers[0] == ch then
    >		point();
    >		makeAflo();
    >		user_input("you win " + str(globals.overflow) + " BTC ! press a key for another ?");
    >		///TODO
    >		///Here the client win 1btc * overflow
    >	else
    >		lost();
    >		globals.overflow = 0;
    >		makeAmem();
    >		user_input("server win! press a key for another ?");
    >		///TODO
    >		//Here the client loose is strike and the mem is cleaned
    >	end if
    >
    >	game();
    >end function
    >
    >makeAmem();
    >game();
    >
<
%
@ Library Loading
~print Generating Library graph.src...
~create_file_in_proj_lib graph.src
~edit_file_in_proj_lib graph.src
    >// Minerva Owl Lib Open Source Package for Grey Hack 0.7.3x, coded by Chrome https://steamcommunity.com/id/01043477120/.
    >// The package is a bundle of many functions.You can use this script for learning , personal usage.If you add
    >// or remove code in view to integrated it to your own public project, in this case please mention wich part belong
    >// to my personal work and intellectual integrity.
    >
    >//  /Â¤vÂ¤\
    >//  |/ \|
    >//  |/ \|  Minerva Owl Lib 3.2.9
    >//   ,|.
    >
    >// Official Documentation : https://minervaowllib.com
    >
    >_Graph = Class("Graph",{});
    >_Graph.prototype.reserved_hex_tag = "";
    >_Graph.prototype.reserved_video_buffer = {"queud":[],"lastFrame":""};
    >_Graph.prototype.reserved_video_display = {"grid":[8,8],"content":[],"bg":"<mark=#000000>x</mark>","rate":0.6}; //default 8x8
    >_Graph.prototype.reserved_video_switch = true;
    >
    >_Graph.prototype.rgb = function(x)
    >	if typeof(x) != "list" then return "error : rgb -> x expected list.";
    >	if x.len != 3 then return "error : rgb -> x expected 3 len."
    >	hexTag = "";
    >	for i in range(0,x.len -1)
    >		if typeof(x[i]) != "number" then return "error : rgb -> x[i] not a number"
    >		hexTag = hexTag + Math.decimalToHex(x[i],"");
    >	end for
    >
    >	if hexTag.len < 6 then
    >		hexTag = "#0" + hexTag;
    >	else
    >		hexTag = "#" + hexTag;
    >	end if
    >
    >	Graph.reserved_hex_tag = hexTag;
    >	return Graph.reserved_hex_tag;
    >end function
    >
    >_Graph.prototype.color = function(x,y)
    >	color = "<color=" + y + ">" + x + "</color>";
    >	return color;
    >end function
    >
    >_Graph.prototype.Size = function(x,y)
    >	if typeof(y) != "number" then return "error : size y not a number.";
    >	return "<size=" + y + ">" + x + "</size>";
    >end function
    >
    >_Graph.prototype.italic = function(x)
    >	italic = "<i>" + x + "</i>";
    >	return italic;
    >end function
    >
    >_Graph.prototype.bold = function(x)
    >	bold = "<b>" + x + "</b>";
    >	return bold;
    >end function
    >
    >_Graph.prototype.underline = function(x)
    >	return "<u>" + x + "</u>";
    >end function
    >
    >_Graph.prototype.drawLine = function(x,y)
    >	if typeof(x) != "string" then return "error : draw line -> x expected string.";
    >	if typeof(y) != "number" then return "error : draw line -> y expected int.";
    >	for i in range(1,y)
    >		x = x + char(95);
    >	end for
    >	return Graph.underline(x) ;
    >end function
    >
    >_Graph.prototype.align = function(x,y)
    >	if y != "center" and y != "right" and y != "left" then return "error : align -> y expected left,right or center.";
    >	return "<align=" + y + ">" + x + "</align>";
    >end function
    >
    >_Graph.prototype.spacing = function(x,y)
    >	return "<cspace=" + y + ">" + x + "</cspace>";
    >end function
    >
    >_Graph.prototype.font = function(x,y)
    >	return "<font=" + y + ">" + x + "</font>";
    >end function
    >
    >_Graph.prototype.indent = function(x,y)
    >	return "<indent=" + y + ">" + x + "</indent>";
    >end function
    >
    >_Graph.prototype.margin = function(x,y)
    >	return "<margin=" + y + ">" + x + "</margin>";
    >end function
    >
    >_Graph.prototype.mark = function(x,y)
    >	return "<mark=" + y + ">" + x + "</mark>";
    >end function
    >
    >_Graph.prototype.sprite = function(x)
    >	return "<sprite=" + x + ">";
    >end function
    >
    >_Graph.prototype.strike = function(x)
    >	return "<s>" + x + "</s>";
    >end function
    >
    >_Graph.prototype.videoEngine = function(buf,dis)
    >	clear_screen;
    >	while (Graph.reserved_video_buffer.queud.len != 0)
    >		if Graph.reserved_video_display.content.len == 0 then
    >			yaxis = [];
    >			for i in range(1,Graph.reserved_video_display.grid[0])
    >				xaxis = [];
    >				for e in range(1,Graph.reserved_video_display.grid[1])
    >					xaxis.push((Graph.reserved_video_display.bg));
    >				end for
    >				yaxis.push(xaxis);
    >			end for
    >			Graph.reserved_video_display.content = yaxis;
    >		end if
    >
    >		Graph.reserved_video_display.content[Graph.reserved_video_buffer.queud[0].position[0] -1][Graph.reserved_video_buffer.queud[0].position[1] -1] = Graph.reserved_video_buffer.queud[0].value;
    >		frame = "";
    >		for i in range(0,Graph.reserved_video_display.content.len -1)
    >			for e in range(0,Graph.reserved_video_display.content[i].len -1)
    >				if Graph.reserved_video_display.content[i][e] == "" then Graph.reserved_video_display.content[i][e] = Graph.reserved_video_display.bg;
    >			end for
    >			frame = frame + char(10) + Graph.reserved_video_display.content[i].join("");
    >		end for
    >		if Graph.reserved_video_buffer.queud.len == 1 then
    >			Graph.reserved_video_buffer.lastFrame = frame;
    >			print(frame);
    >			wait(Graph.reserved_video_display.rate);
    >		end if
    >		Graph.reserved_video_buffer.queud.remove(0);
    >	end while
    >	return;
    >end function
    >
    >_Graph.prototype.animator = function(x)
    >	for i in range(0,x.len -1)
    >		Graph.reserved_video_buffer.queud.push(x[i]);
    >	end for
    >	return Graph.videoEngine(Graph.reserved_video_buffer,Graph.reserved_video_display);
    >end function
    >
    >_Graph.prototype.animationPart = function(x,y)
    >	if typeof(x) != "string" then return "error : animation part -> x expected string.";
    >	if typeof(y) != "list" then return "error : animation part -> y expected number.";
    >	animationString = {};
    >	animationString.value = x;
    >	animationString.position = y;
    >	return animationString;
    >end function
    >
    >_Graph.prototype.displayFlush = function()
    >	Graph.reserved_video_display.content = [];
    >	return;
    >end function
    >
    >_Graph.prototype.bgColor = function(x)
    >	Graph.reserved_video_display.bg = "<mark=" + x + ">x</mark>";
    >	return;
    >end function
    >
    >_Graph.prototype.displayResolution = function(x,y)
    >	if typeof(x) != "number" then return "error : display resolution -> x expected number.";
    >	if typeof(y) != "number" then return "error : display resolution -> y expected number.";
    >	Graph.reserved_video_display.grid[0] = x;
    >	Graph.reserved_video_display.grid[1] = y;
    >	return;
    >end function
    >
    >_Graph.prototype.lastFrame = function()
    >	return Graph.reserved_video_buffer.lastFrame;
    >end function
    >
    >_Graph.prototype.displayRate = function(x)
    >	if typeof(x) != "number" then return "error : display rate -> x expected number.";
    >	return Graph.reserved_video_display.rate(x);
    >end function
    >
    >Graph = new Class("Graph",_Graph.prototype).prototype;
    >
<
~print Generating Library math.src...
~create_file_in_proj_lib math.src
~edit_file_in_proj_lib math.src
    >// Minerva Owl Lib Open Source Package for Grey Hack 0.7.3x, coded by Chrome https://steamcommunity.com/id/01043477120/.
    >// The package is a bundle of many functions.You can use this script for learning , personal usage.If you add
    >// or remove code in view to integrated it to your own public project, in this case please mention wich part belong
    >// to my personal work and intellectual integrity.
    >
    >//  /Â¤vÂ¤\
    >//  |/ \|
    >//  |/ \|  Minerva Owl Lib 3.2.9
    >//   ,|.
    >
    >// Official Documentation : https://minervaowllib.com
    >
    >_Math = Class("template",{});
    >_Math.prototype.reserved_hex_string = "";
    >_Math.prototype.reserved_binary_string = "";
    >
    >_Math.prototype.vector2 = function(x,y)
    >	if typeof(x) != "number" then return "error : vector2 -> x not a number.";
    >	if typeof(y) != "number" then return "error : vector2 -> y not a number.";
    >	return [x,y];
    >end function
    >
    >_Math.prototype.vector3 = function(x,y,z)
    >	if typeof(x) != "number" then return "error : vector3 -> x not a number.";
    >	if typeof(y) != "number" then return "error : vector3 -> y not a number.";
    >	if typeof(z) != "number" then return "error : vector3 -> z not a number.";
    >	return [x,y,z];
    >end function
    >
    >_Math.prototype.vector4 = function(x,y,z,w)
    >	if typeof(x) != "number" then return "error : vector4 -> x not a number.";
    >	if typeof(y) != "number" then return "error : vector4 -> y not a number.";
    >	if typeof(z) != "number" then return "error : vector4 -> z not a number.";
    >	if typeof(w) != "number" then return "error : vector4 -> w not a number.";
    >	return [x,y,z,w];
    >end function
    >
    >_Math.prototype.decimalToHex = function(x,z)
    >	if typeof(x) != "number" then return "error : decimal to hex -> x not number.";
    >
    >	remainder = x% 16;
    >	sum = x / 16;
    >	hex = z;
    >
    >	if remainder == 10 then remainder = "A";
    >	if remainder == 11 then remainder = "B";
    >	if remainder == 12 then remainder = "C";
    >	if remainder == 13 then remainder = "D";
    >	if remainder == 14 then remainder = "E";
    >	if remainder == 15 then remainder = "F";
    >
    >	hex = hex + str(remainder);
    >	if str(sum).indexOf(char(46)) != null then
    >		sum = str(sum).split(char(46))[0].to_int;
    >	end if
    >
    >	if sum > 0 then
    >		Math.decimalToHex(sum,hex);
    >	else
    >		Math.reserved_hex_string = String.reverseString(hex);
    >	end if
    >	return Math.reserved_hex_string;
    >end function
    >
    >_Math.prototype.hexToDecimal = function(x)
    >	if typeof(x) != "string" then return "error : hex to decimal -> x string expected";
    >	if x.len < 1 then return "error : hex to decimal -> x string expected";
    >	if x[0] != "#" then return "error : hex to decimal -> x is not a hex.";
    >	x = x.upper;
    >
    >	bits = [];
    >	for i in range(0,x.len -1)
    >		if i != 0 then bits.push(x[i]);
    >	end for
    >
    >	for i in range(0,bits.len -1)
    >		if typeof(bits[i].to_int) != "number" then
    >			if bits[i] == "A" then bits[i] = 10 * (16 ^ i);
    >			if bits[i] == "B" then bits[i] = 11 * (16 ^ i);
    >			if bits[i] == "C" then bits[i] = 12 * (16 ^ i);
    >			if bits[i] == "D" then bits[i] = 13 * (16 ^ i);
    >			if bits[i] == "E" then bits[i] = 14 * (16 ^ i);
    >			if bits[i] == "F" then bits[i] = 15 * (16 ^ i);
    >		else
    >			bits[i] = bits[i].to_int * (16 ^ i);
    >		end if
    >	end for
    >	decimal = 0;
    >	for i in range(0,bits.len -1)
    >		decimal = decimal + bits[i];
    >	end for
    >	return str(decimal);
    >end function
    >
    >_Math.prototype.percent = function(x,y)
    >	if typeof(x) != "number" then return "error : pourcent -> x expected int.";
    >	if typeof(x) != "number" then return "error : pourcent -> y expected int.";
    >	percent = (x/y) * 100;
    >	return percent;
    >end function
    >
    >_Math.prototype.median = function(x)
    >	if typeof(x) != "list" then return "error : median -> x expected list.";
    >	n = x.len;
    >	median = x[(n + 1)/2];
    >	return median;
    >end function
    >
    >_Math.prototype.average = function(x)
    >	if typeof(x) != "list" then return "error : average -> x list expected.";
    >	sum = 0;
    >	elements = 0;
    >	for i in range(0,x.len -1)
    >		if typeof(x[i]) != "number" then return "error :  average -> x[i] expected integer.";
    >		sum = sum + x[i];
    >		elements = elements + 1;
    >	end for
    >
    >	average = sum/elements;
    >	return average;
    >end function
    >
    >_Math.prototype.decimalToBinary = function(x,y)
    >	if typeof(x) != "number" then return "error : decimal to binary -> x int expected.";
    >
    >	remainder = x% 2;
    >	sum = x / 2;
    >	binary = y;
    >
    >	binary = binary + str(remainder);
    >	if str(sum).indexOf(char(46)) != null then
    >		sum = str(sum).split(char(46))[0].to_int;
    >	end if
    >
    >	if sum == 1 or sum == 0 then
    >		if sum == 0 then binary = binary + "0";
    >		if sum == 1 then binary = binary + "1";
    >		Math.reserved_binary_string = String.reverseString(binary).to_int;
    >		return Math.reserved_binary_string;
    >	else
    >		return Math.decimalToBinary(sum,binary);
    >	end if
    >end function
    >
    >_Math.prototype.binaryToDecimal = function(x)
    >	bin = str(x);
    >	sum = 0;
    >	for i in range(0,bin.len -1)
    >		sum = (sum * 2) + bin[i].to_int;
    >	end for
    >	return sum;
    >end function
    >
    >Math = new Class("Math",_Math.prototype).prototype;
    >
<
~print Generating Library prototype.src...
~create_file_in_proj_lib prototype.src
~edit_file_in_proj_lib prototype.src
    >// Minerva Owl Lib Open Source Package for Grey Hack 0.7.3x, coded by Chrome https://steamcommunity.com/id/01043477120/.
    >// The package is a bundle of many functions.You can use this script for learning , personal usage.If you add
    >// or remove code in view to integrated it to your own public project, in this case please mention wich part belong
    >// to my personal work and intellectual integrity.
    >
    >//  /Â¤vÂ¤\
    >//  |/ \|
    >//  |/ \|  Minerva Owl Lib 3.2.9
    >//   ,|.
    >
    >// Official Documentation : https://minervaowllib.com
    >
    >Prototype = function(x,y)
    >  _Prototype = {};
    >  _Prototype.prototype = y;
    >  _Prototype.prototype.classID = x;
    >  _Prototype.classID = x;
    >  return _Prototype;
    >end function
    >
    >Class = function(name,map)
    >    return @(new Prototype(name,map)).__isa;
    >end function
    >
<
~print Generating Library string.src...
~create_file_in_proj_lib string.src
~edit_file_in_proj_lib string.src
    >// Minerva Owl Lib Open Source Package for Grey Hack 0.7.3x, coded by Chrome https://steamcommunity.com/id/01043477120/.
    >// The package is a bundle of many functions.You can use this script for learning , personal usage.If you add
    >// or remove code in view to integrated it to your own public project, in this case please mention wich part belong
    >// to my personal work and intellectual integrity.
    >
    >//  /Â¤vÂ¤\
    >//  |/ \|
    >//  |/ \|  Minerva Owl Lib 3.2.9
    >//   ,|.
    >
    >// Official Documentation : https://minervaowllib.com
    >
    >_String = Class("template",{});
    >_String.prototype.reserved_reverse_string = "";
    >
    >_String.prototype.reverseString = function(x)
    >	if typeof(x) != "string" then return "error : reverse string -> x expected string.";
    >	string = [];
    >	for i in range(0,x.len -1)
    >		string.push(x[i]);
    >	end for
    >	string.reverse;
    >	String.reserved_reverse_string = string.join("");
    >	return String.reserved_reverse_string;
    >end function
    >
    >_String.prototype.stringToDecimal = function(x)
    >	if typeof(x) != "string" then return "error : string to decimal -> x expected string.";
    >	decString = "";
    >	for i in range(0,x.len -1)
    >		decString = decString + code(x[i]);
    >		if i < x.len -1 then decString = decString + ":";
    >	end for
    >	return decString;
    >end function
    >
    >_String.prototype.stringToHex = function(x)
    >	if typeof(x) != "string" then return "error : string to hex -> x expected string.";
    >	hexString = "";
    >	for i in range(0,x.len -1)
    >		hexString = hexString + Math.decimalToHex(code(x[i]),"");
    >		if i < x.len -1 then hexString = hexString + ":";
    >	end for
    >	return hexString;
    >end function
    >
    >_String.prototype.stringToList = function(x)
    >	if typeof(x) != "string" then return "error : string to list -> x expected string.";
    >	list = [];
    >	for i in range(0,x.len -1)
    >		list.push(x[i]);
    >	end for
    >	return list;
    >end function
    >
    >_String.prototype.cut = function(x,y)
    >	if typeof(x) != "string" then return "error : string cut -> x expected string.";
    >	if typeof(y) != "list" then return "error : string cut -> x expected vector2.";
    >
    >	string = String.stringToList(x);
    >	part1 = [];
    >	part2 = [];
    >	for i in range(0,string.len -1)
    >		if i < y[0] then part1.push(string[i]);
    >		if i > y[1] then part2.push(string[i]);
    >	end for
    >	cutString = [part1.join(""),part2.join("")];
    >
    >	return cutString;
    >end function
    >
    >_String.prototype.replace = function(x,y,z)
    >	if typeof(x) != "string" then return "error : string replace -> x expected string.";
    >	if typeof(y) != "list" then return "error : string replace -> y expected string.";
    >	if typeof(z) != "string" then return "error : string replace -> z expected string.";
    >
    >	string = String.stringToList(x);
    >	part1 = [];
    >	part2 = [];
    >
    >	for i in range(0,string.len -1)
    >		if i < y[0] then part1.push(string[i]);
    >		if i > y[1] then part2.push(string[i]);
    >	end for
    >	newString = part1.join("") + z + part2.join("");
    >
    >	return newString;
    >end function
    >
    >_String.prototype.isAlNum = function(x,y)
    >	if typeof(x) != "string" then return "error : isalnum -> x expected a string.";
    >	if typeof(y) != "number" then return "error : isalnum -> y expected a number.";
    >	if x.len < 1 then return "error : the string is empty and by nature doesnt have character.";
    >	if y < 0 or y > x.len then return "error : isalnum -> y is out of range.";
    >
    >	c_charset = "abcdefghijklmnopqrstuvwxyz0123456789";
    >	ch = x[y].lower;
    >
    >	for i in range(0,c_charset.len -1)
    >		if c_charset[i] == ch then return true;
    >	end for
    >	return false;
    >end function
    >
    >_String.prototype.isAlpha = function(x,y)
    >	if typeof(x) != "string" then return "error : isalpha -> x expected a string.";
    >	if typeof(y) != "number" then return "error : isalpha -> y expected a number.";
    >	if x.len < 1 then return "error : the string is empty and by nature doesnt have character.";
    >	if y < 0 or y > x.len then return "error : isalpha -> y is out of range.";
    >
    >	c_charset = "abcdefghijklmnopqrstuvwxyz";
    >	ch = x[y].lower;
    >
    >	for i in range(0,c_charset.len -1)
    >		if c_charset[i] == ch then return true;
    >	end for
    >	return false;
    >end function
    >
    >_String.prototype.isLower = function(x,y)
    >	if typeof(x) != "string" then return "error : islower -> x expected a string.";
    >	if typeof(y) != "number" then return "error : islower -> y expected a string.";
    >	if x.len < 0 then return "error : the string is empty and by nature doesnt have character.";
    >	if y < 0 or y > x.len then return "error : islower -> y is out range.";
    >
    >	c_charset = "abcdefghijklmnopqrstuvwxyz";
    >  ch = x[y];
    >
    >	for i in range(0,c_charset.len -1)
    >		if c_charset[i] == ch then return true;
    >	end for
    >	return false;
    >end function
    >
    >_String.prototype.isUpper = function(x,y)
    >	if typeof(x) != "string" then return "error : isupper -> x expected a string.";
    >	if typeof(y) != "number" then return "error : isupper -> y expected a number.";
    >	if x.len < 0 then return "error : the string is empty and by nature doesnt have character.";
    >	if y < 0 or y > x.len then return "error : isupper -> y is out of range.";
    >
    >	c_charset = "abcdefghijklmnopqrstuvwxyz".upper;
    >	ch = x[y];
    >
    >	for i in range(0,c_charset.len -1)
    >		if c_charset[i] == ch then return true;
    >	end for
    >	return false;
    >end function
    >
    >_String.prototype.isDigit = function(x,y)
    >	if typeof(x) != "string" then return "error : isdigit -> x expected a string.";
    >	if typeof(y) != "number" then return "error : isdigit -> y expected a number.";
    >	if x.len < 0 then return "error : the string is empty and by nature doesnt have character.";
    >	if y < 0 or y > x.len then return "error : isdigit -> y is out of range.";
    >
    >	c_charset = "0123456789";
    >	ch = x[y];
    >
    >	for i in range(0,c_charset.len -1)
    >		if c_charset[i] == ch then return true;
    >	end for
    >	return false;
    >end function
    >
    >_String.prototype.isSpace = function(x,y)
    >	if typeof(x) != "string" then return "error : isspace -> x expected a string.";
    >	if typeof(y) != "number" then return "error : isspace -> y expected a number.";
    >	if x.len < 0 then return "error : the string is empty and by nature doesnt have character.";
    >	if y < 0 or y > x.len then return "error : isspace -> y is out of range.";
    >
    >	c_charset = 32;
    >	ch = code(x[y]);
    >
    >	if c_charset == ch then return true;
    >	if c_charset != ch then return false;
    >end function
    >
    >_String.prototype.isPrint = function(x,y)
    >	if typeof(x) != "string" then return "error : isprint -> x expected a string.";
    >	if typeof(y) != "number" then return "error : isprint -> y expected a number.";
    >	if x.len < 0 then return "error : the string is empty and by nature doesnt have character.";
    >	if y < 0 or y > x.len then return "error : isprint -> y is out of range.";
    >
    >	c_charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%&'()*+,-./:;<=>?@[\]^_`{|}~""";
    >	ch = x[y];
    >
    >	for i in range(0,c_charset.len -1)
    >		if c_charset[i] == ch or code(ch) == 32 then return true;
    >	end for
    >	return false;
    >end function
    >
    >_String.prototype.isPunct = function(x,y)
    >	if typeof(x) != "string" then return "error : ispunct -> x expected a string.";
    >	if typeof(y) != "number" then return "error : ispunct -> y expected a number.";
    >	if x.len < 0 then return "error : the string is empty and by nature doesnt have character.";
    >	if y < 0 or y > x.len then return "error : ispunct -> y is out of range.";
    >
    >	c_charset =  """#$%&'()*+,-./:;<=>?@[\]^_`{|}~";
    >	ch = x[y];
    >
    >	for i in range(0,c_charset.len -1)
    >		if c_charset[i] == ch then return true;
    >	end for
    >	return false;
    >end function
    >
    >String = new Class("String",_String.prototype).prototype;
    >
<
%
@ Other Loading
~print Generating Build Configuration...
~create_file_in_proj build.conf
~edit_file_in_proj build.conf
    ># CHECK_SRCS is used for checking if
    ># the libraries and the main.src for compiler
    ># errors
    >CHECK_SRCS=TRUE
    ># GEN_LOG generates a log
    ># in the obj_location
    >GEN_LOG=FALSE
    ># if you want to use the import_code
    ># function then set it to TRUE or do you want to slap each
    ># library ontop of each other keep it FALSE. (Usefull for bypassing character limit)
    >IMPORT=FALSE
    ># Makes the compiled file shorter by removing indents
    ># and comments and empty lines
    >SHORTEN_COMPILED_FILE=TRUE
    >
<
~print Generating lbl file...
~create_file_in_proj lib_build.list
~edit_file_in_proj lib_build.list
    >prototype.src
    >graph.src
    >math.src
    >string.src
<
%
